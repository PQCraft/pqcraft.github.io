<!DOCTYPE html>
<html lang="en" style="padding: 0px">
    <script language="JavaScript" type="text/javascript" src="/js/jquery.js"></script>
    <script language="JavaScript" type="text/javascript" src="/js/pageload.js"></script>
    <head>
        <script>var name="Coding Style"</script>
        <title id="title"></title>
        <span id="meta"></span>
        <script>$(document).ready(function(){$('#meta').load('/html/meta.htm');});</script>
    </head>
    <span id="header"></span>
    <script>$(document).ready(function(){$('#header').load('/html/header.htm');});</script>
    <div id="pgname"></div>
    <body bgcolor=#000000>
        <div class="body">
            <h1>My Coding Style</h1>
            <h6>Some pseudocode-like examples of how I write code</h6>
        </div>
        <br>
        <div class="divider" style="background-color: var(--bg-color)" id="C"></div>
        <div class="body h2">
            <a href="#C" class="hlink text normcur"><h4>C</h4></a>
            4-space indent<br>
            lowerCamelCase/bumpyCase when name contains full words<br>
            lowercase when name contains abbreviations or short words<br>
            <note>NOTE: This code is formatted for GCC C99</note><br>
            <br>
            <div class="code">
            <code_keyword>
            #include &#60;header.h&#62;<br>
            #include "local-header.h"<br>
            <br>
            #define MACRO1 VALUE1<br>
            #define MACRO2 VALUE2<br>
            #define MACRO3 VALUE3<br>
            </code_keyword>
            <br>
            <code_type>int</code_type> var1 = <code_number>0</code_number>, var2 = <code_number>0</code_number>;<br>
            <br>
            <code_type>int</code_type> <code_function>main</code_function>(<code_type>int</code_type> argc, <code_type>char</code_type>* argv[]) {<br>
            <code_comment>
            <tb>// comment<br>
            <tb>/* block comment */<br>
            <tb>/*<br>
            <tb><tb>multi-line<br>
            <tb><tb>block<br>
            <tb><tb>comment<br>
            <tb>*/<br>
            </code_comment>
            <tb>var1 += <code_function>randFunc</code_function>() + <code_number>1</code_number>;<br>
            <tb>var2 += <code_function>retgetval</code_function>(<code_string>"Test"</code_string>);<br>
            <tb><code_function>callFunction</code_function>(<code_string>"const"</code_string>);<br>
            <tb><code_command>if</code_command> (var1 == var2) <code_function>oneLine</code_function>();<br>
            <tb>var1++;<br>
            <tb><code_command>if</code_command> (var1 == var2) {<br>
            <tb><tb><code_function>func1</code_function>();<br>
            <tb><tb>if (<code_function>func2</code_function>(<code_string>"Test"</code_string>, <code_number>-1</code_number>)) {if (!<code_function>func3</code_function>()) {<code_function>puts</code_function>(<code_string>"func3() returned NULL."</code_string>);} var2++;}<br>
            <tb><tb><code_label>try-again</code_label>:<br>
            <tb><tb>var2++;<br>
            <tb><tb>var2 = <code_function>retnumgc</code_function>(&var2);<br>
            <tb><tb><code_command>switch</code_command> (var2) {<br>
            <tb><tb><tb><code_command>case</code_command> <code_number>0</code_number>:<br>
            <tb><tb><tb><tb><code_function>printf</code_function>(<code_string>"[%d]\n"</code_string>, var2);<br>
            <tb><tb><tb><tb><code_command>break</code_command>;<br>
            <tb><tb><tb><code_command>default</code_command>:<br>
            <tb><tb><tb><tb><code_command>goto</code_command> <code_label>try-again</code_label>;<br>
            <tb><tb><tb><tb><code_command>break</code_command>;<br>
            <tb><tb>}<br>
            <tb><tb>var1 = <code_function>sample</code_function>(var2);<br>
            <tb><tb><code_command>return</code_command> <code_function>getcleanret</code_function>(var1, var2);<br>
            <tb>}<br>
            }
            </div>
        </div>
        <br>
        <br>
        <div class="divider" id="BASIC"></div>
        <div class="body h2">
            <a href="#BASIC" class="hlink text normcur"><h4>BASIC</h4></a>
            4-space indent<br>
            UPPERCASE<br>
            <note>NOTE: This code is formatted for QB64</note><br>
            <br>
            <div class="code">
            <code_comment>
            'Comment<br>
            <br>
            'Multi-line<br>
            'Comment<br>
            </code_comment>
            <br>
            <code_command>FOR</code_command> I = <code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>3</code_number><br>
            <tb><code_command>PRINT</code_command> <code_string>"Test"</code_string><br>
            <code_command>NEXT</code_command><br>
            <br>
            <code_command>DIM</code_command> TEST(<code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>255</code_number>) <code_keyword>AS</code_keyword> <code_type>_BYTE</code_type><br>
            <br>
            <code_command>LOCATE</code_command> <code_number>1</code_number>, <code_number>1</code_number><br>
            <br>
            <code_command>FOR</code_command> Y = <code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>15</code_number><br>
            <tb><code_command>FOR</code_command> X = <code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>15</code_number><br>
            <tb><tb>P = (X * <code_number>16</code_number>) + Y<br>
            <tb><tb>ARRAY(P) = <code_function>CINT</code_function>(RND * <code_number>255</code_number>)<br>
            <tb><tb><code_command>IF</code_command> ARRAY(P) < <code_number>32</code_number> <code_keyword>OR</code_keyword> ARRAY(P) > <code_number>126</code_number> <code_keyword>THEN</code_keyword> ARRAY(P) = <code_number>46</code_number><br>
            <tb><code_command>NEXT</code_command><br>
            <code_command>NEXT</code_command><br>
            <br>
            <code_command>FOR</code_command> Y = <code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>15</code_number><br>
            <tb><code_command>FOR</code_command> X = <code_number>0</code_number> <code_keyword>TO</code_keyword> <code_number>15</code_number><br>
            <tb><tb>B = ARRAY((X * <code_number>16</code_number>) + Y)<br>
            <tb><tb><code_command>PRINT</code_command> <code_function>CHR$</code_function>(B);<br>
            <tb><code_command>NEXT</code_command><br>
            <code_command>NEXT</code_command><br>
            </div>
        </div>
        <br>
        <br>
        <div class="divider" id="sh"></div>
        <div class="body h2">
            <a href="#sh" class="hlink text normcur"><h4>Unix Shell Script (sh/bash)</h4></a>
            4-space indent<br>
            lowercase commands<br>
            UPPERCASE variables<br>
            <note>NOTE: This code is formatted for bash</note><br>
            <br>
            <div class="code">
            <code_comment>
            #!/bin/bash<br>
            <br>
            # Comment<br>
            <br>
            ##############<br>
            # Multi-line<br>
            # Comment<br>
            ##############<br>
            </code_comment>
            <br>
            <code_keyword>F</code_keyword>=<code_keyword>$@</code_keyword><br>
            <br>
            <code_command>if [</code_command> -z <code_string>"<code_keyword>$F</code_keyword>"</code_string> ]; <code_command>then</code_command> <br>
            <tb><code_command>echo</code_command> -n<br>
            <code_command>else</code_command><br>
            <tb><code_keyword>F</code_keyword>=.<code_keyword>$F</code_keyword><br>
            <code_command>fi<br>
            <br>
            chmod</code_command> +x <code_keyword>$A</code_keyword> *<code_keyword>$F</code_keyword><br>
            </div>
        </div>
    </body>
    <span id="footer"></span>
    <script>$(document).ready(function(){$('#footer').load('/html/footer.htm');});</script>
</html>
<script>pgload();</script>
